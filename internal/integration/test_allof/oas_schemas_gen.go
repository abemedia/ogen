// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

// Ref: #/components/schemas/Location
type Location struct {
	Lat float64 `json:"lat"`
	Lon float64 `json:"lon"`
}

// GetLat returns the value of Lat.
func (s *Location) GetLat() float64 {
	return s.Lat
}

// GetLon returns the value of Lon.
func (s *Location) GetLon() float64 {
	return s.Lon
}

// SetLat sets the value of Lat.
func (s *Location) SetLat(val float64) {
	s.Lat = val
}

// SetLon sets the value of Lon.
func (s *Location) SetLon(val float64) {
	s.Lon = val
}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *NilString) SetToNull() {
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NullableStringsOK is response for NullableStrings operation.
type NullableStringsOK struct{}

// ObjectsWithConflictingArrayPropertyOK is response for ObjectsWithConflictingArrayProperty operation.
type ObjectsWithConflictingArrayPropertyOK struct{}

// Merged schema.
type ObjectsWithConflictingArrayPropertyReq struct {
	// Merged property.
	Foo []int `json:"foo"`
	Bar int   `json:"bar"`
}

// GetFoo returns the value of Foo.
func (s *ObjectsWithConflictingArrayPropertyReq) GetFoo() []int {
	return s.Foo
}

// GetBar returns the value of Bar.
func (s *ObjectsWithConflictingArrayPropertyReq) GetBar() int {
	return s.Bar
}

// SetFoo sets the value of Foo.
func (s *ObjectsWithConflictingArrayPropertyReq) SetFoo(val []int) {
	s.Foo = val
}

// SetBar sets the value of Bar.
func (s *ObjectsWithConflictingArrayPropertyReq) SetBar(val int) {
	s.Bar = val
}

// ObjectsWithConflictingPropertiesOK is response for ObjectsWithConflictingProperties operation.
type ObjectsWithConflictingPropertiesOK struct{}

// Merged schema.
type ObjectsWithConflictingPropertiesReq struct {
	// Merged property.
	Foo string `json:"foo"`
	Bar OptInt `json:"bar"`
}

// GetFoo returns the value of Foo.
func (s *ObjectsWithConflictingPropertiesReq) GetFoo() string {
	return s.Foo
}

// GetBar returns the value of Bar.
func (s *ObjectsWithConflictingPropertiesReq) GetBar() OptInt {
	return s.Bar
}

// SetFoo sets the value of Foo.
func (s *ObjectsWithConflictingPropertiesReq) SetFoo(val string) {
	s.Foo = val
}

// SetBar sets the value of Bar.
func (s *ObjectsWithConflictingPropertiesReq) SetBar(val OptInt) {
	s.Bar = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLocation returns new OptLocation with value set to v.
func NewOptLocation(v Location) OptLocation {
	return OptLocation{
		Value: v,
		Set:   true,
	}
}

// OptLocation is optional Location.
type OptLocation struct {
	Value Location
	Set   bool
}

// IsSet returns true if OptLocation was set.
func (o OptLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLocation) Reset() {
	var v Location
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLocation) SetTo(v Location) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLocation) Get() (v Location, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLocation) Or(d Location) Location {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilReferencedAllOfNullableMultipartNullableAllOfLocation returns new OptNilReferencedAllOfNullableMultipartNullableAllOfLocation with value set to v.
func NewOptNilReferencedAllOfNullableMultipartNullableAllOfLocation(v ReferencedAllOfNullableMultipartNullableAllOfLocation) OptNilReferencedAllOfNullableMultipartNullableAllOfLocation {
	return OptNilReferencedAllOfNullableMultipartNullableAllOfLocation{
		Value: v,
		Set:   true,
	}
}

// OptNilReferencedAllOfNullableMultipartNullableAllOfLocation is optional nullable ReferencedAllOfNullableMultipartNullableAllOfLocation.
type OptNilReferencedAllOfNullableMultipartNullableAllOfLocation struct {
	Value ReferencedAllOfNullableMultipartNullableAllOfLocation
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilReferencedAllOfNullableMultipartNullableAllOfLocation was set.
func (o OptNilReferencedAllOfNullableMultipartNullableAllOfLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilReferencedAllOfNullableMultipartNullableAllOfLocation) Reset() {
	var v ReferencedAllOfNullableMultipartNullableAllOfLocation
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilReferencedAllOfNullableMultipartNullableAllOfLocation) SetTo(v ReferencedAllOfNullableMultipartNullableAllOfLocation) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilReferencedAllOfNullableMultipartNullableAllOfLocation) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilReferencedAllOfNullableMultipartNullableAllOfLocation) SetToNull() {
	o.Set = true
	o.Null = true
	var v ReferencedAllOfNullableMultipartNullableAllOfLocation
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilReferencedAllOfNullableMultipartNullableAllOfLocation) Get() (v ReferencedAllOfNullableMultipartNullableAllOfLocation, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilReferencedAllOfNullableMultipartNullableAllOfLocation) Or(d ReferencedAllOfNullableMultipartNullableAllOfLocation) ReferencedAllOfNullableMultipartNullableAllOfLocation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilReferencedAllOfNullableNullableAllOfLocation returns new OptNilReferencedAllOfNullableNullableAllOfLocation with value set to v.
func NewOptNilReferencedAllOfNullableNullableAllOfLocation(v ReferencedAllOfNullableNullableAllOfLocation) OptNilReferencedAllOfNullableNullableAllOfLocation {
	return OptNilReferencedAllOfNullableNullableAllOfLocation{
		Value: v,
		Set:   true,
	}
}

// OptNilReferencedAllOfNullableNullableAllOfLocation is optional nullable ReferencedAllOfNullableNullableAllOfLocation.
type OptNilReferencedAllOfNullableNullableAllOfLocation struct {
	Value ReferencedAllOfNullableNullableAllOfLocation
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilReferencedAllOfNullableNullableAllOfLocation was set.
func (o OptNilReferencedAllOfNullableNullableAllOfLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilReferencedAllOfNullableNullableAllOfLocation) Reset() {
	var v ReferencedAllOfNullableNullableAllOfLocation
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilReferencedAllOfNullableNullableAllOfLocation) SetTo(v ReferencedAllOfNullableNullableAllOfLocation) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilReferencedAllOfNullableNullableAllOfLocation) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilReferencedAllOfNullableNullableAllOfLocation) SetToNull() {
	o.Set = true
	o.Null = true
	var v ReferencedAllOfNullableNullableAllOfLocation
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilReferencedAllOfNullableNullableAllOfLocation) Get() (v ReferencedAllOfNullableNullableAllOfLocation, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilReferencedAllOfNullableNullableAllOfLocation) Or(d ReferencedAllOfNullableNullableAllOfLocation) ReferencedAllOfNullableNullableAllOfLocation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReferencedAllOfNullableAllOfLocation returns new OptReferencedAllOfNullableAllOfLocation with value set to v.
func NewOptReferencedAllOfNullableAllOfLocation(v ReferencedAllOfNullableAllOfLocation) OptReferencedAllOfNullableAllOfLocation {
	return OptReferencedAllOfNullableAllOfLocation{
		Value: v,
		Set:   true,
	}
}

// OptReferencedAllOfNullableAllOfLocation is optional ReferencedAllOfNullableAllOfLocation.
type OptReferencedAllOfNullableAllOfLocation struct {
	Value ReferencedAllOfNullableAllOfLocation
	Set   bool
}

// IsSet returns true if OptReferencedAllOfNullableAllOfLocation was set.
func (o OptReferencedAllOfNullableAllOfLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReferencedAllOfNullableAllOfLocation) Reset() {
	var v ReferencedAllOfNullableAllOfLocation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReferencedAllOfNullableAllOfLocation) SetTo(v ReferencedAllOfNullableAllOfLocation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReferencedAllOfNullableAllOfLocation) Get() (v ReferencedAllOfNullableAllOfLocation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReferencedAllOfNullableAllOfLocation) Or(d ReferencedAllOfNullableAllOfLocation) ReferencedAllOfNullableAllOfLocation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReferencedAllOfNullableMultipartAllOfLocation returns new OptReferencedAllOfNullableMultipartAllOfLocation with value set to v.
func NewOptReferencedAllOfNullableMultipartAllOfLocation(v ReferencedAllOfNullableMultipartAllOfLocation) OptReferencedAllOfNullableMultipartAllOfLocation {
	return OptReferencedAllOfNullableMultipartAllOfLocation{
		Value: v,
		Set:   true,
	}
}

// OptReferencedAllOfNullableMultipartAllOfLocation is optional ReferencedAllOfNullableMultipartAllOfLocation.
type OptReferencedAllOfNullableMultipartAllOfLocation struct {
	Value ReferencedAllOfNullableMultipartAllOfLocation
	Set   bool
}

// IsSet returns true if OptReferencedAllOfNullableMultipartAllOfLocation was set.
func (o OptReferencedAllOfNullableMultipartAllOfLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReferencedAllOfNullableMultipartAllOfLocation) Reset() {
	var v ReferencedAllOfNullableMultipartAllOfLocation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReferencedAllOfNullableMultipartAllOfLocation) SetTo(v ReferencedAllOfNullableMultipartAllOfLocation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReferencedAllOfNullableMultipartAllOfLocation) Get() (v ReferencedAllOfNullableMultipartAllOfLocation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReferencedAllOfNullableMultipartAllOfLocation) Or(d ReferencedAllOfNullableMultipartAllOfLocation) ReferencedAllOfNullableMultipartAllOfLocation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/ReferencedAllOfNullable
type ReferencedAllOfNullable struct {
	Location              OptLocation                                        `json:"location"`
	AllOfLocation         OptReferencedAllOfNullableAllOfLocation            `json:"allOfLocation"`
	NullableAllOfLocation OptNilReferencedAllOfNullableNullableAllOfLocation `json:"nullableAllOfLocation"`
}

// GetLocation returns the value of Location.
func (s *ReferencedAllOfNullable) GetLocation() OptLocation {
	return s.Location
}

// GetAllOfLocation returns the value of AllOfLocation.
func (s *ReferencedAllOfNullable) GetAllOfLocation() OptReferencedAllOfNullableAllOfLocation {
	return s.AllOfLocation
}

// GetNullableAllOfLocation returns the value of NullableAllOfLocation.
func (s *ReferencedAllOfNullable) GetNullableAllOfLocation() OptNilReferencedAllOfNullableNullableAllOfLocation {
	return s.NullableAllOfLocation
}

// SetLocation sets the value of Location.
func (s *ReferencedAllOfNullable) SetLocation(val OptLocation) {
	s.Location = val
}

// SetAllOfLocation sets the value of AllOfLocation.
func (s *ReferencedAllOfNullable) SetAllOfLocation(val OptReferencedAllOfNullableAllOfLocation) {
	s.AllOfLocation = val
}

// SetNullableAllOfLocation sets the value of NullableAllOfLocation.
func (s *ReferencedAllOfNullable) SetNullableAllOfLocation(val OptNilReferencedAllOfNullableNullableAllOfLocation) {
	s.NullableAllOfLocation = val
}

func (*ReferencedAllOfNullable) referencedAllOfNullableReq() {}

type ReferencedAllOfNullableAllOfLocation struct {
	Lat float64 `json:"lat"`
	Lon float64 `json:"lon"`
}

// GetLat returns the value of Lat.
func (s *ReferencedAllOfNullableAllOfLocation) GetLat() float64 {
	return s.Lat
}

// GetLon returns the value of Lon.
func (s *ReferencedAllOfNullableAllOfLocation) GetLon() float64 {
	return s.Lon
}

// SetLat sets the value of Lat.
func (s *ReferencedAllOfNullableAllOfLocation) SetLat(val float64) {
	s.Lat = val
}

// SetLon sets the value of Lon.
func (s *ReferencedAllOfNullableAllOfLocation) SetLon(val float64) {
	s.Lon = val
}

// Ref: #/components/schemas/ReferencedAllOfNullable
type ReferencedAllOfNullableMultipart struct {
	Location              OptLocation                                                 `json:"location"`
	AllOfLocation         OptReferencedAllOfNullableMultipartAllOfLocation            `json:"allOfLocation"`
	NullableAllOfLocation OptNilReferencedAllOfNullableMultipartNullableAllOfLocation `json:"nullableAllOfLocation"`
}

// GetLocation returns the value of Location.
func (s *ReferencedAllOfNullableMultipart) GetLocation() OptLocation {
	return s.Location
}

// GetAllOfLocation returns the value of AllOfLocation.
func (s *ReferencedAllOfNullableMultipart) GetAllOfLocation() OptReferencedAllOfNullableMultipartAllOfLocation {
	return s.AllOfLocation
}

// GetNullableAllOfLocation returns the value of NullableAllOfLocation.
func (s *ReferencedAllOfNullableMultipart) GetNullableAllOfLocation() OptNilReferencedAllOfNullableMultipartNullableAllOfLocation {
	return s.NullableAllOfLocation
}

// SetLocation sets the value of Location.
func (s *ReferencedAllOfNullableMultipart) SetLocation(val OptLocation) {
	s.Location = val
}

// SetAllOfLocation sets the value of AllOfLocation.
func (s *ReferencedAllOfNullableMultipart) SetAllOfLocation(val OptReferencedAllOfNullableMultipartAllOfLocation) {
	s.AllOfLocation = val
}

// SetNullableAllOfLocation sets the value of NullableAllOfLocation.
func (s *ReferencedAllOfNullableMultipart) SetNullableAllOfLocation(val OptNilReferencedAllOfNullableMultipartNullableAllOfLocation) {
	s.NullableAllOfLocation = val
}

func (*ReferencedAllOfNullableMultipart) referencedAllOfNullableReq() {}

type ReferencedAllOfNullableMultipartAllOfLocation struct {
	Lat float64 `json:"lat"`
	Lon float64 `json:"lon"`
}

// GetLat returns the value of Lat.
func (s *ReferencedAllOfNullableMultipartAllOfLocation) GetLat() float64 {
	return s.Lat
}

// GetLon returns the value of Lon.
func (s *ReferencedAllOfNullableMultipartAllOfLocation) GetLon() float64 {
	return s.Lon
}

// SetLat sets the value of Lat.
func (s *ReferencedAllOfNullableMultipartAllOfLocation) SetLat(val float64) {
	s.Lat = val
}

// SetLon sets the value of Lon.
func (s *ReferencedAllOfNullableMultipartAllOfLocation) SetLon(val float64) {
	s.Lon = val
}

type ReferencedAllOfNullableMultipartNullableAllOfLocation struct {
	Lat float64 `json:"lat"`
	Lon float64 `json:"lon"`
}

// GetLat returns the value of Lat.
func (s *ReferencedAllOfNullableMultipartNullableAllOfLocation) GetLat() float64 {
	return s.Lat
}

// GetLon returns the value of Lon.
func (s *ReferencedAllOfNullableMultipartNullableAllOfLocation) GetLon() float64 {
	return s.Lon
}

// SetLat sets the value of Lat.
func (s *ReferencedAllOfNullableMultipartNullableAllOfLocation) SetLat(val float64) {
	s.Lat = val
}

// SetLon sets the value of Lon.
func (s *ReferencedAllOfNullableMultipartNullableAllOfLocation) SetLon(val float64) {
	s.Lon = val
}

type ReferencedAllOfNullableNullableAllOfLocation struct {
	Lat float64 `json:"lat"`
	Lon float64 `json:"lon"`
}

// GetLat returns the value of Lat.
func (s *ReferencedAllOfNullableNullableAllOfLocation) GetLat() float64 {
	return s.Lat
}

// GetLon returns the value of Lon.
func (s *ReferencedAllOfNullableNullableAllOfLocation) GetLon() float64 {
	return s.Lon
}

// SetLat sets the value of Lat.
func (s *ReferencedAllOfNullableNullableAllOfLocation) SetLat(val float64) {
	s.Lat = val
}

// SetLon sets the value of Lon.
func (s *ReferencedAllOfNullableNullableAllOfLocation) SetLon(val float64) {
	s.Lon = val
}

// ReferencedAllOfNullableOK is response for ReferencedAllOfNullable operation.
type ReferencedAllOfNullableOK struct{}

type ReferencedAllOfNullableReqEmptyBody struct{}

func (*ReferencedAllOfNullableReqEmptyBody) referencedAllOfNullableReq() {}

// ReferencedAllofOK is response for ReferencedAllof operation.
type ReferencedAllofOK struct{}

// ReferencedAllofOptionalOK is response for ReferencedAllofOptional operation.
type ReferencedAllofOptionalOK struct{}

type ReferencedAllofOptionalReqEmptyBody struct{}

func (*ReferencedAllofOptionalReqEmptyBody) referencedAllofOptionalReq() {}

// Merged schema.
// Ref: #/components/schemas/Robot
type Robot struct {
	State    RobotState `json:"state"`
	ID       uuid.UUID  `json:"id"`
	Location Location   `json:"location"`
}

// GetState returns the value of State.
func (s *Robot) GetState() RobotState {
	return s.State
}

// GetID returns the value of ID.
func (s *Robot) GetID() uuid.UUID {
	return s.ID
}

// GetLocation returns the value of Location.
func (s *Robot) GetLocation() Location {
	return s.Location
}

// SetState sets the value of State.
func (s *Robot) SetState(val RobotState) {
	s.State = val
}

// SetID sets the value of ID.
func (s *Robot) SetID(val uuid.UUID) {
	s.ID = val
}

// SetLocation sets the value of Location.
func (s *Robot) SetLocation(val Location) {
	s.Location = val
}

func (*Robot) referencedAllofOptionalReq() {}
func (*Robot) referencedAllofReq()         {}

// Merged schema.
// Ref: #/components/schemas/Robot
type RobotMultipart struct {
	State    RobotMultipartState `json:"state"`
	ID       uuid.UUID           `json:"id"`
	Location Location            `json:"location"`
}

// GetState returns the value of State.
func (s *RobotMultipart) GetState() RobotMultipartState {
	return s.State
}

// GetID returns the value of ID.
func (s *RobotMultipart) GetID() uuid.UUID {
	return s.ID
}

// GetLocation returns the value of Location.
func (s *RobotMultipart) GetLocation() Location {
	return s.Location
}

// SetState sets the value of State.
func (s *RobotMultipart) SetState(val RobotMultipartState) {
	s.State = val
}

// SetID sets the value of ID.
func (s *RobotMultipart) SetID(val uuid.UUID) {
	s.ID = val
}

// SetLocation sets the value of Location.
func (s *RobotMultipart) SetLocation(val Location) {
	s.Location = val
}

func (*RobotMultipart) referencedAllofOptionalReq() {}
func (*RobotMultipart) referencedAllofReq()         {}

type RobotMultipartState string

const (
	RobotMultipartStateOn  RobotMultipartState = "on"
	RobotMultipartStateOff RobotMultipartState = "off"
)

// AllValues returns all RobotMultipartState values.
func (RobotMultipartState) AllValues() []RobotMultipartState {
	return []RobotMultipartState{
		RobotMultipartStateOn,
		RobotMultipartStateOff,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RobotMultipartState) MarshalText() ([]byte, error) {
	switch s {
	case RobotMultipartStateOn:
		return []byte(s), nil
	case RobotMultipartStateOff:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RobotMultipartState) UnmarshalText(data []byte) error {
	switch RobotMultipartState(data) {
	case RobotMultipartStateOn:
		*s = RobotMultipartStateOn
		return nil
	case RobotMultipartStateOff:
		*s = RobotMultipartStateOff
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RobotState string

const (
	RobotStateOn  RobotState = "on"
	RobotStateOff RobotState = "off"
)

// AllValues returns all RobotState values.
func (RobotState) AllValues() []RobotState {
	return []RobotState{
		RobotStateOn,
		RobotStateOff,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RobotState) MarshalText() ([]byte, error) {
	switch s {
	case RobotStateOn:
		return []byte(s), nil
	case RobotStateOff:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RobotState) UnmarshalText(data []byte) error {
	switch RobotState(data) {
	case RobotStateOn:
		*s = RobotStateOn
		return nil
	case RobotStateOff:
		*s = RobotStateOff
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// SimpleIntegerOK is response for SimpleInteger operation.
type SimpleIntegerOK struct{}

// SimpleObjectsOK is response for SimpleObjects operation.
type SimpleObjectsOK struct{}

// Merged schema.
type SimpleObjectsReq struct {
	Foo OptString `json:"foo"`
	Bar OptBool   `json:"bar"`
}

// GetFoo returns the value of Foo.
func (s *SimpleObjectsReq) GetFoo() OptString {
	return s.Foo
}

// GetBar returns the value of Bar.
func (s *SimpleObjectsReq) GetBar() OptBool {
	return s.Bar
}

// SetFoo sets the value of Foo.
func (s *SimpleObjectsReq) SetFoo(val OptString) {
	s.Foo = val
}

// SetBar sets the value of Bar.
func (s *SimpleObjectsReq) SetBar(val OptBool) {
	s.Bar = val
}

// StringsNotypeOK is response for StringsNotype operation.
type StringsNotypeOK struct{}
